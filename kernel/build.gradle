sourceSets {
	intJava
	intTest
}

dependencies {
	
	compile configurations.serverCore
	compile project(':bootstrapper')
	
	testCompile configurations.testPack
	testCompile 'com.google.inject.extensions:guice-grapher:3.0'
	
	intJavaCompile configurations.runtime
	intJavaCompile configurations.testPack
	intJavaCompile sourceSets.main.output
	
	intTestCompile configurations.intJavaCompile
	intTestCompile sourceSets.intJava.output
}

test {
	maxParallelForks = Runtime.getRuntime().availableProcessors() / 2
	
	minHeapSize = "128m"
	maxHeapSize = "512m"
}

task integrationTest(type: Test, dependsOn: intTestClasses) {
	
	testSrcDirs = [
		sourceSets.intTest.java.srcDirs.find(),
		sourceSets.intTest.resources.srcDirs.find(),
		project(':').sourceSets.test.resources.srcDirs.find()
	]
	testClassesDir = sourceSets.intTest.output.classesDir
	
	classpath = files(
		sourceSets.intTest.runtimeClasspath,
		project(':').sourceSets.test.resources.srcDirs
	)
	
	reports.html.destination = new File(reports.html.destination.parentFile, name)
	reports.junitXml.destination = new File(reports.junitXml.destination, name)
	
	minHeapSize = "128m"
	maxHeapSize = "512m"
}

integrationTest.shouldRunAfter test

// don't let the build proceed if tests fail... but don't require tests because hey! i like to jar it
jar.mustRunAfter test
jar.mustRunAfter integrationTest

check.dependsOn integrationTest
